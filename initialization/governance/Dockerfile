# Dockerfile for the Rust Voting Application

# ---- Builder Stage ----
# Use a specific version of Rust for reproducibility.
# Consider -slim or -alpine variants if a smaller builder is needed and compatible.
FROM rustlang/rust:nightly as builder

WORKDIR /app

# Copy manifests and lock file first to leverage Docker layer caching for dependencies.
COPY Cargo.toml ./

# # Create a dummy src/main.rs to build and cache dependencies.
# # This speeds up subsequent builds if dependencies haven't changed.
# RUN mkdir src && echo "fn main(){println!(\"Building dependencies...\");}" > src/main.rs
# Build dependencies only. The --locked flag ensures Cargo.lock is used.
# RUN cargo build --release 
# Remove the dummy main.rs. The target directory will be reused and overwritten by the next build.
# RUN rm -f src/main.rs
#asdasdsa
# Copy the actual application source code.
COPY src ./src

# Build the application in release mode.
# This will rebuild only the application code if dependencies were cached.
# The erc20_abi.json is generated by abigen! macro in client.rs, so it does not need to be copied separately.
RUN cargo build --release 

# ---- Runtime Stage ----
# Use a slim Debian image for a smaller and more secure runtime environment.
FROM debian:bullseye-slim AS runtime

# Install ca-certificates, which are necessary for HTTPS connections (e.g., to Ethereum RPC nodes).
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the compiled binary from the builder stage to a standard location in the runtime image.
COPY --from=builder /app/target/release/governance-proposal /usr/local/bin/governance-proposal

ENTRYPOINT ["/usr/local/bin/governance-proposal"]
